name: Performance

on:
  push:
    branches:
      - performance-testing

  workflow_dispatch:
    inputs:
      testToRun:
        description: "Test to run"
        type: choice
        options:
        - consent-journey
        - nurse-journey
      URN:
        description: "Required: what URN to run the test against."
        required: false
        type: string
      duration:
        description: "Optional (default 3600) Duration of selected test in seconds. This will include ramp-up."
        required: false
        type: number
      threads:
        description: "Optional (default 70) Threads to run."
        required: false
        type: number
      ramp_up:
        description: "Optional (default 900) Ramp-up time in seconds. Threads will be gradually started up over this time."
        required: false
        type: number
      vaccination_loop:
        description: "Optional (default 20) Vaccination loop (nurse journey only). The number of vaccinations each nurse will perform before logging and back in again."
        required: false
        type: number
      row_count:
        description: "Optional (default 1000) number of rows in the cohort file."
        required: false
        type: string

jobs:
  STS_based_test:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'workflow_dispatch' }}

    env:
      jmeter_version: 5.6.3
      cmdrunner_version: 2.3
      jmeter_plugins_manager_version: 1.7.0
      jmeter_plugins: jpgc-udp,jpgc-graphs-basic,jpgc-dummy,bzm-random-csv,jpgc-sts
      # jmeter_home: ${{ github.workspace }}/jmeter-${{ env.jmeter_version }}

    steps:
      - uses: actions/checkout@v5
      
      - name: Cache jmeter
        id: cache-jmeter
        uses: actions/cache@v4
        env:
          cache-name: cache-jmeter
        with:
          path: jmeter
          key: jmeter

#Having run each step separately, it's only the curl request that takes time. So including the unzip and move means I can cache the 'jmeter' folder entirely
#STS also requires some files in the jmeter folder, but I don't want those cached so the 'touch' commands are being included in the plugins step
#Finally move some of the report generator options into the jmeter folder to simplify the jmeter command in each execution step

      - name: Install JMeter
        if: ${{ steps.cache-jmeter.outputs.cache-hit != 'true'}}
        run: |
          curl -sSO https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${{ env.jmeter_version }}.tgz
          tar xzf apache-jmeter-${{ env.jmeter_version }}.tgz
          mv apache-jmeter-${{ env.jmeter_version }} jmeter
          curl -sSO --output-dir jmeter/lib https://repo1.maven.org/maven2/kg/apc/cmdrunner/${{ env.cmdrunner_version }}/cmdrunner-${{ env.cmdrunner_version }}.jar
          curl -LsS --output jmeter/lib/ext/jmeter-plugins-manager-${{ env.jmeter_plugins_manager_version  }}.jar https://jmeter-plugins.org/get/
          java -cp jmeter/lib/ext/jmeter-plugins-manager-${{ env.jmeter_plugins_manager_version }}.jar org.jmeterplugins.repository.PluginManagerCMDInstaller
          chmod +x jmeter/bin/PluginsManagerCMD.sh


  
      - name: Install JMeter plugins
        if: env.jmeter_plugins != ''
        run: |
          if [ -x "$(command -v parallel)" ]; then
            echo "Using GNU parallel to install plugins"
            parallel -d, -j 5 -n 1 jmeter/bin/PluginsManagerCMD.sh install {} ::: ${{ env.jmeter_plugins }}
          else
            echo "GNU parallel not found, installing plugins sequentially"
            IFS=',' read -ra PLUGINS <<< "${{ env.jmeter_plugins }}"
            for plugin in "${PLUGINS[@]}"; do
              jmeter/bin/PluginsManagerCMD.sh install $plugin
            done
          fi
          sed -i '/<Logger name="org.apache.jmeter.junit" level="debug" \/>/a \    <Logger name="org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase" level="info" additivity="false"\/>' jmeter/bin/log4j2.xml
          sed -i '$ajmeterPlugin.sts.loadAndRunOnStartup=true \njmeterPlugin.sts.port=9191 \njmeterPlugin.sts.daemon=false \njsr223.init.file=simple-table-server.groovy' jmeter/bin/user.properties
          sed -i '$ajmeter.reportgenerator.report_title="MAVIS test report" \njmeter.reportgenerator.overall_granularity=10000 \njmeter.reportgenerator.sample_filter="^.*[^0-9]$"' jmeter/bin/user.properties
          sed -i '$ajmeterPlugin.sts.loadAndRunOnStartup=true \njmeterPlugin.sts.port=9191 \njmeterPlugin.sts.daemon=false \njsr223.init.file=simple-table-server.groovy' jmeter/bin/user.properties
          touch jmeter/consents.txt
          touch jmeter/vaccinations.txt

      - name: Set timestamp
        id: timestamp
        run: echo "timestamp=$(date '+%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Run Consent Journey to test STS
        run: |
          mkdir -p consent-output
          consent_output_dir=consent-output
          jmeter/bin/jmeter -n -t performance-tests/STS/E2E/consent-journey-new-data-source.jmx \
              -l $consent_output_dir/samples.jtl \
              -j $consent_output_dir/jmeter.log \
              -e -o $consent_output_dir/consent-report \
              -JAuthToken=${{secrets.HTTP_AUTH_TOKEN_FOR_TESTS}} \
              -JUser=${{inputs.user}} \
              -JInputFile="cohortnew.csv"

      - name: Upload consent journey JMeter output
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-consent-journey-output-${{ env.timestamp }}
          path: consent-output
          if-no-files-found: warn
